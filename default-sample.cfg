# Configuration file sample
#
# Comment line with leading '#' to fallback to the hardcoded default value
#
# The configuration is load in this order:
# - First the hardcoded value are loaded
# - If no configuration file is provided in wsgi script, the first file that exist will be loaded:
#     * on Unix/Linux System:
#        - `/etc/pywps.cfg`
#        - `$HOME/.pywps.cfg`
#     * on Windows:
#        - `pywps\\etc\\default.cfg`
# - Then if PYWPS_CFG environment variable is set, this file will be loaded
#
# Last loaded file override setting from the previous one.


[metadata:main]
# Setup the title in GetCapabilities
identification_title=PyWPS Demo server
# Setup the abstract in GetCapabilities
identification_abstract=PyWPS testing and development server. Do NOT use this server in production environment. You shall setup PyWPS as WSGI application for production. Please refer documentation for further detials.
# Setup the keywords in GetCapabilities
identification_keywords=WPS,GRASS,PyWPS, Demo, Dev
identification_keywords_type=theme
# Setup the fees in GetCapabilities
identification_fees=None
# Setup the AccessConstraints in GetCapabilities
identification_accessconstraints=None
# Setup provider name in GetCapabilities
provider_name=PyWPS Development team
# Setup provider URL (informative) in GetCapabilities
provider_url=https://pywps.org/

# Setup Contacts information for GetCapabilities (informative)
contact_name=Your Name
contact_position=Developer
contact_address=My Street
contact_city=My City
contact_stateorprovince=None
contact_postalcode=000 00
contact_country=World, Internet
contact_phone=+xx-xxx-xxx-xxxx
contact_fax=+xx-xxx-xxx-xxxx
contact_email=contact@yourdomain.org
contact_url=https://pywps.org
contact_hours=8:00-20:00UTC
contact_instructions=Knock on the door
contact_role=pointOfContact

[server]
encoding=utf-8
language=en-US
url=http://localhost:5000/wps
maxsingleinputsize=1mb
maxrequestsize=3mb
outputurl=http://localhost:5000/outputs/
outputpath=outputs
workdir=workdir
maxprocesses=30
parallelprocesses=2
storagetype=file

# hardcoded default : tempfile.gettempdir()
; temp_path=/tmp

processes_path=
# list of allowed input paths (file url input) seperated by ':'
allowedinputpaths=

# hardcoded default : tempfile.gettempdir()
; workdir=

# If this flag is enabled it will set the HOME environment for each process to
# its current workdir (a temp folder).
sethomedir=false

# If this flag is true PyWPS will remove the process temporary workdir after
# process has finished.
cleantempdir=true

# File storage outputs can be copied, moved or linked from the workdir to the
# output folder.
# Allowed functions: "copy", "move", "link" (hardcoded default "copy")
storage_copy_function=copy

# Handles the default mimetype for requests.
# valid options: "text/xml", "application/json"
default_mimetype=text/xml

# Default indentation used for json data responses.
json_indent=2

# hardcoded default : tempfile.gettempdir()
#temp_path=/tmp

processes_path=
# list of allowed input paths (file url input) seperated by ':'
allowedinputpaths=

# hardcoded default : tempfile.gettempdir()
#workdir=

# If this flag is enabled it will set the HOME environment for each process to
# its current workdir (a temp folder).
sethomedir=false

# If this flag is true PyWPS will remove the process temporary workdir after
# process has finished.
cleantempdir=true

storagetype=file

# File storage outputs can be copied, moved or linked from the workdir to the
# output folder.
# Allowed functions: "copy", "move", "link" (hardcoded default "copy")
storage_copy_function=copy

# Handles the default mimetype for requests.
# valid options: "text/xml", "application/json"
default_mimetype=text/xml

# Default indentation used for json data responses.
json_indent=2

[processing]
mode=default

# hardcoded default: os.path.dirname(os.path.realpath(sys.argv[0]))
; path=

# https://github.com/natefoo/slurm-drmaa
drmaa_native_specification=

# hardcoded default: os.path.dirname(os.path.realpath(sys.argv[0]))
#path=

# https://github.com/natefoo/slurm-drmaa
drmaa_native_specification=

[logging]
level=INFO
file=logs/pywps.log
database=sqlite:///:memory:
format=%(asctime)s] [%(levelname)s] file=%(pathname)s line=%(lineno)s module=%(module)s function=%(funcName)s %(message)s
prefix=pywps_

[grass]
gisbase=/usr/local/grass-7.3.svn/

[s3]
bucket=my-org-wps
region=us-east-1
prefix=appname/coolapp/
public=true
encrypt=false
